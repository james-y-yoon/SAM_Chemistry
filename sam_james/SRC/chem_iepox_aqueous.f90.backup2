module chem_iepox_aqueous

  implicit none  

  ! Aqueous chemistry variables, one aqueous and one gas for each species
  integer, parameter :: naqchem_fields = 4
  integer :: iTETROL = 1
  integer :: iIEPOX_NO3 = 2
  integer :: iIEPOX_SO4 = 3
  integer :: iIEPOX = 4  

  real,  parameter, dimension(naqchem_fields) :: molwt = (/ &
      136.15, 182.15, 216.123, 334./) ! g/mol corresponding to above species  
  
  logical, dimension(naqchem_fields), public :: flag_aqchemvar_out3D  ! which aqueous chem array to  output

  logical, dimension(naqchem_fields), public :: flag_aqchemgasvar_out3D  ! which aqueous chem product array to output


   character(LEN=7), parameter, dimension(naqchem_fields) :: aq_species_names = (/ &
        'TETROLa', 'IPXNO3a', 'IPXSO4a', 'IEPOXa ' /)
   character(LEN=7), parameter, dimension(naqchem_fields) :: aq_gasprod_species_names = (/ &
        'TETROLg', 'IPXNO3g', 'IPXSO4g', 'IEPOXg ' /)

 

   ! Add aerosol chemistry products
   integer, parameter :: narchem_fields = 2
   integer :: iTETROLr = 1
   integer :: iIEPOX_SO4r = 2
   real,  parameter, dimension(narchem_fields) :: &
        molwt_ar = (/136.15, 216.123/) ! g/mol   

   logical, dimension(narchem_fields), public :: flag_archemvar_out3D  ! which aqueous chem array to  output

   character(LEN=7), parameter, dimension(narchem_fields) :: &
        ar_species_names = (/'TETROLr', 'IPXSO4r'/)

   
  contains 


  
subroutine iepox_aero_transfer_rate(nzm, T, p, R_inorg, H, SO4, HSO4, OrgMF, transfer_rate, rho_aerosol)

  implicit none
  integer, intent(in) :: nzm   ! number of vertical grid levels  
  real, dimension(1:nzm), intent(in) :: T   !  K 
  real, dimension(1:nzm), intent(in) :: p   ! atm
  real, dimension(1:nzm), intent(in) :: R_inorg  ! Inorganic aerosol radius (m)
  real, dimension(1:nzm), intent(in) :: H   !  M of H+
  real, dimension(1:nzm), intent(in) :: SO4   !  M  of nucleophile SO4-2
  real, dimension(1:nzm), intent(in) :: HSO4   !  M of general acid HSO4-
  real, intent(in) :: OrgMF  !Organic mass fraction
  real, dimension(1:nzm), intent(out) :: transfer_rate  !  transfer rate /s
  real, dimension(1:nzm), intent(out) :: rho_aerosol  !  mean aerosol density kg/m3


  real :: Ma, Dg, ah, a, R, Haq, Horg, kh, kso4, khso4, Ha, Daq
  real :: rho_org_aerosol, rho_inorg_aerosol
  real :: pi = 3.1415927
  
  real, dimension(1:nzm) :: Dorg, w, Vinorg, Minorg, Morg, Vorg, Vtot, Rtot, Lorg
  real, dimension(1:nzm) :: Sa, Kaq, faqH, faqSO4, Aq_inverse, Org_inverse, Gamma_inverse, gamma, Kmta
  
   ! temporary overrides for gamma 
   gamma = 1.e-3  ! high organic
   gamma = 0.01   ! low organic
   
    ! constants
    Ma = 0.1191390 !kg/mol - mass of IEPOX
    Dg = 0.1 !cm2/s
    ah = 0.25 !value is from eddingsaas - H molality/55.5 #no units - activity of H+ 
    a = 0.1 !no units - mass accomodation
    
    R = 0.082057 !L*atm/k*mol
    
    Haq = 1e6 !M/atm - henrys law constant for IEPOX
    Horg = 6e5 !M/atm - henrys law for org layer
    
    kh = 1.2*(1e-3) !M-1s-1 - rate constant of H3O+
    kso4 = 1*(1e-4) !M-1s-1 - ballpark - rate constant of nucleophile SO4-2
    khso4 = 7.3*(1e-4) !M-1s-1 rate consant of general acid HSO4- 
    
    Ha = 1.7e8 !M/atm - henrys law constant - value for IEPOX from gaston 
    Daq = 10e-9 !m^2/s - diffusion of IEPOX in water 
    
    rho_org_aerosol = 0.9 * 1000  ! kg/m3
    rho_inorg_aerosol = 1.5 * 1000 ! kg/m3

    ! Dorg still seems off here - not using it yet
    Dorg = 100*((1.38e-23)*T)/(6*3.1315*(Rtot)*(315e-9)) !cm2/s - k*t/6*pi*viscosity*radius - diffusion of IEPOX in org
    w = ((8*R*T)/(pi*Ma))**0.5  !m/s - book equ for mean speed (281 in paper?)
    w = 270.  ! temporary override


    Vinorg = 4*pi*(R_inorg**3)/3 !m3 - volume inorganic
    Minorg = Vinorg*rho_inorg_aerosol !mass inorganic
    Morg = Minorg/(1/OrgMF-1) !mass organic
    Vorg = Morg/rho_org_aerosol !m3 - volume organic
    Vtot = Vinorg + Vorg !m3 - volume total
    Rtot = (3*Vtot/4/pi)**(1/3) !m - radius total
    Lorg = Rtot - R_inorg !m - thickness of organic coating
    Sa = 4*pi*Rtot**2 !m2 - surface area of particles
    Kaq = (kh*H) + (kso4*SO4*ah) + (khso4*HSO4) !s-1 - reaction rate constant from gaston
    faqH = (kh*H)/Kaq
    faqSO4 = ((kso4*SO4*ah) + (khso4*HSO4))/Kaq
    Aq_inverse = (Sa*w)/(4*Vtot*R*T*Haq*Kaq) !1/aq     
    Org_inverse = ((w*Lorg)/(4*R*T*Horg*Dorg))*(Rtot/R_inorg) !1/org
    !    Gamma_inverse = ((Rtot*w)/(4*Dg))+(1/a)+(Aq_inverse)+(Org_inverse) #1/gamma
    Gamma_inverse = 1/gamma
    Kmta = ((Rtot**2/3/Dg)+(4*Rtot*Gamma_inverse/3/w))**(-1) !s-1 - mass transfer coefficient

    transfer_rate = Sa*Kmta
    rho_aerosol = (Morg + Minorg)/Vtot
    
  end subroutine iepox_aero_transfer_rate
  
subroutine iepox_aqueous_tendencies(nzm, T, p, Rp, Wl, H, NO3, SO4, HSO4, &
  gas_input, aq_input, gas_tend, aq_tend, print_debug_output)

  implicit none
  
  integer, intent(in) :: nzm   ! number of vertical grid levels  
  real, dimension(1:nzm), intent(in) :: T   !  K 
  real, dimension(1:nzm), intent(in) :: p   ! atm
  real, dimension(1:nzm), intent(in) :: Rp  ! droplet radius (m)
  real, dimension(1:nzm), intent(in) :: Wl  ! liquid water content vol H2O/vol air
  real, dimension(1:nzm), intent(in) :: H   !  M of H+
  real, dimension(1:nzm), intent(in) :: NO3   !  M 
  real, dimension(1:nzm), intent(in) :: SO4   !  M 
  real, dimension(1:nzm), intent(in) :: HSO4   !  M 

  real, dimension(1:nzm, 1:naqchem_fields), intent(in) :: gas_input, aq_input
  real, dimension(1:nzm, 1:naqchem_fields), intent(out) :: gas_tend, aq_tend  

  logical, intent(in) :: print_debug_output
  logical :: add_text 
  
  real, dimension(1:nzm) :: IEPOXg, IEPOXaq
  real, dimension(1:nzm) :: TETROLg, TETROLaq
  real, dimension(1:nzm) :: IEPOX_NO3g, IEPOX_NO3aq
  real, dimension(1:nzm) :: IEPOX_SO4g, IEPOX_SO4aq

  integer :: k

  ! constants
  real :: R = 0.082057 !L*atm/k*mol
  real :: Dg = 1e-5  !  m^2/s - diffusitivity of IEPOX in air (0.1 cm^2/s)
  real :: ah = 0.25 !value is from eddingsaas - H/55.5 #no units - mol/L of H3O+/55.5 mol/L water - mol fraction of H+ in water - activity 
  real :: a = 1 !no unit - molec enering liquid/molec collisions with surface 

  real :: Daq = 1e-9 !m^2/s - diffusion of A in water 
  real :: Ha = 1.7e8  ! M/atm - henry's law constant - value from gaston 

  real :: kh = 1.2e-3 !M-1s-1 - rate constant of H
  real :: kno3 = 2.e-4 !M-1s-1 rate constant of nucleohpile NO3-  
  real :: kso4 = 1.e-4 !M-1s-1 - PLACEHOLDER - rate constant of nucleophile SO4-2 
  real :: khso4 = 7.3e-4 !M-1s-1 rate constant of general acids  

  real :: Ma = 0.1191390 !kg/mol - mass of IEPOX
  real :: Mt = 0.13615     !kg/mol - mass of tetrol
  real :: Ms = 0.216123   ! kg/mol mass of sulfate product
  real :: Mn = 0.18215    ! kg/mol estimate of nitrate product

  real :: Htet = 1e8 !M/atm tetrol estimate 
  real :: Hs = 1e16 !M/atm sulfate product estimate 
  real :: Hn = 1e7 !M/atm nitrate product estimate 
  
  real, dimension(1:nzm) :: kaq  ! s-1 full rate constant
  real, dimension(1:nzm) :: faqH, faqNO3, faqSO4  ! rate fractions
  real, dimension(1:nzm) :: qq   ! m/(1/s/m^2/s)**0.5 = no units
  real, dimension(1:nzm) :: Q   ! no units
  real, dimension(1:nzm) :: w  ! m/s   mean speed
  real, dimension(1:nzm) :: Kmt  ! s-1 mass transfer coefficient


  kaq = (kh*H) + (kno3*NO3*ah) + (kso4*SO4*ah) + (khso4*HSO4) ! full rate constant
     ! add epps to avoid divide by zero????
  faqH = (kh*H)/kaq
  faqNO3 = (kno3*NO3*ah)/kaq
  faqSO4 = ((kso4*SO4*ah) + (khso4*HSO4))/kaq
  qq = Rp*((kaq/Daq)**0.5)
  Q = 3.0*((1.0/tanh(qq))/qq)-(1.0/(qq**2))
  w = ((8*R*T)/(3.1415*Ma))**0.5 ! m/s book equ for mean speed
  Kmt = ((Rp**2/(3*Dg)) + (4*Rp/(3*w*a))) **(-1) ! s-1 mass transfer coefficient

  !write (*,*) ah, kaq, faqH, faqNO3, faqSO4, qq, Q, w
  !write (*,*) Kmt(1), IEPOXg(1), IEPOXaq(1)


  IEPOXg = gas_input(:, iIEPOX)
  IEPOXaq = aq_input(:, iIEPOX)
  TETROLg = gas_input(:, iTETROL)
  TETROLaq = aq_input(:, iTETROL)
  IEPOX_NO3g = gas_input(:, iIEPOX_NO3)
  IEPOX_NO3aq = aq_input(:, iIEPOX_NO3)
  IEPOX_SO4g = gas_input(:, iIEPOX_SO4)
  IEPOX_SO4aq = aq_input(:, iIEPOX_SO4)
  
  
  !   ODE terms

  gas_tend(:, iIEPOX) = -(Kmt*Wl*IEPOXg) + ((1/Ha)*Kmt*IEPOXaq*Wl)
  aq_tend(:, iIEPOX) = ((Kmt*IEPOXg)/(R*T))-((Kmt*IEPOXaq)/(Ha*R*T))-(Q*kaq*IEPOXaq)
  gas_tend(:, iTETROL) = ((Kmt*TETROLaq*Wl)/Htet)-(Kmt*TETROLg*Wl)
  aq_tend(:, iTETROL) = (faqH*Q*kaq*IEPOXaq)-(Kmt*TETROLaq/(R*T*Htet))+(Kmt*TETROLg/(R*T))
  gas_tend(:, iIEPOX_NO3) = ((Kmt*IEPOX_NO3aq*Wl)/Hn)-(Kmt*IEPOX_NO3g*Wl)
  aq_tend(:, iIEPOX_NO3) = (faqNO3*Q*kaq*IEPOXaq)-(Kmt*IEPOX_NO3aq/(R*T*Hn))+(Kmt*IEPOX_NO3g/(R*T))
  gas_tend(:, iIEPOX_SO4) =  ((Kmt*IEPOX_SO4aq*Wl)/Hs)-(Kmt*IEPOX_SO4g*Wl)
  aq_tend(:, iIEPOX_SO4) = (faqSO4*Q*kaq*IEPOXaq)-(Kmt*IEPOX_SO4aq/(R*T*Hs))+(Kmt*IEPOX_SO4g/(R*T))

  if (print_debug_output) then
     add_text=.true.
     do k = 1,nzm
        
        if (Wl(k).gt.1.e-10) then
           if (add_text) then
              write (*,*) 'k, Wl, IEPOXg, IEPOXg+, IEPOXa, IEPOXa+, TETROLg, TETROLg+, TETROLa, TETROLa+'
              add_text = .false.
           end if   
              
              write(*,*) k, Wl(k), gas_input(k,iIEPOX), gas_tend(k,iIEPOX), aq_input(k,iIEPOX), aq_tend(k,iIEPOX) !
           !  gas_input(k,iTETROL), aq_input(k,iTETROL), gas_tend(k,iTETROL), aq_tend(k,iTETROL)
        end if
     end do   
  end if              

  
end subroutine iepox_aqueous_tendencies

end module chem_iepox_aqueous
